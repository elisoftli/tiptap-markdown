{"version":3,"file":"tiptap-markdown.es.js","sources":["../src/extensions/tiptap/tight-lists.js","../src/util/markdown.js","../src/serialize/state.js","../src/extensions/marks/html.js","../src/util/dom.js","../src/extensions/nodes/html.js","../src/extensions/nodes/blockquote.js","../src/extensions/nodes/bullet-list.js","../src/extensions/nodes/code-block.js","../src/extensions/nodes/hard-break.js","../src/extensions/nodes/heading.js","../src/extensions/nodes/horizontal-rule.js","../src/extensions/nodes/image.js","../src/extensions/nodes/list-item.js","../src/extensions/nodes/ordered-list.js","../src/extensions/nodes/paragraph.js","../src/util/prosemirror.js","../src/extensions/nodes/table.js","../src/extensions/nodes/task-item.js","../src/extensions/nodes/task-list.js","../src/extensions/nodes/text.js","../src/extensions/marks/bold.js","../src/extensions/marks/code.js","../src/extensions/marks/italic.js","../src/extensions/marks/link.js","../src/extensions/marks/strike.js","../src/extensions/index.js","../src/util/extensions.js","../src/serialize/MarkdownSerializer.js","../src/parse/MarkdownParser.js","../src/extensions/tiptap/clipboard.js","../src/Markdown.js"],"sourcesContent":["import { Extension } from \"@tiptap/core\";\r\n\r\nexport const MarkdownTightLists = Extension.create({\r\n    name: 'markdownTightLists',\r\n    addOptions: () => ({\r\n        tight: true,\r\n        tightClass: 'tight',\r\n        listTypes: [\r\n            'bulletList',\r\n            'orderedList',\r\n        ],\r\n    }),\r\n    addGlobalAttributes() {\r\n        return [\r\n            {\r\n                types: this.options.listTypes,\r\n                attributes: {\r\n                    tight: {\r\n                        default: this.options.tight,\r\n                        parseHTML: element =>\r\n                            element.getAttribute('data-tight') === 'true' || !element.querySelector('p'),\r\n                        renderHTML: attributes => ({\r\n                            class: attributes.tight ? this.options.tightClass : null,\r\n                            'data-tight': attributes.tight ? 'true' : null,\r\n                        }),\r\n                    },\r\n                },\r\n            },\r\n        ]\r\n    },\r\n    addCommands() {\r\n        return {\r\n            toggleTight: (tight = null) => ({ editor, commands }) => {\r\n                function toggleTight(name) {\r\n                    if(!editor.isActive(name)) {\r\n                        return false;\r\n                    }\r\n                    const attrs = editor.getAttributes(name);\r\n                    return commands.updateAttributes(name, {\r\n                        tight: tight ?? !attrs?.tight,\r\n                    });\r\n                }\r\n                return this.options.listTypes\r\n                    .some(name => toggleTight(name));\r\n            }\r\n        }\r\n    },\r\n});\r\n","import markdownit from 'markdown-it';\r\n\r\nconst md = markdownit();\r\n\r\nfunction scanDelims(text, pos) {\r\n    md.inline.State.prototype.scanDelims.call({ src: text, posMax: text.length })\r\n    const state = new (md.inline.State)(text, null, null, []);\r\n    return state.scanDelims(pos, true);\r\n}\r\n\r\nexport function shiftDelim(text, delim, start, offset) {\r\n    let res = text.substring(0, start) + text.substring(start + delim.length);\r\n    res = res.substring(0, start + offset) + delim + res.substring(start + offset);\r\n    return res;\r\n}\r\n\r\nfunction trimStart(text, delim, from, to) {\r\n    let pos = from, res = text;\r\n    while(pos < to) {\r\n        if(scanDelims(res, pos).can_open) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, 1);\r\n        pos++;\r\n    }\r\n    return { text: res, from: pos, to }\r\n}\r\n\r\nfunction trimEnd(text, delim, from, to) {\r\n    let pos = to, res = text;\r\n    while(pos > from) {\r\n        if(scanDelims(res, pos).can_close) {\r\n            break;\r\n        }\r\n        res = shiftDelim(res, delim, pos, -1);\r\n        pos--;\r\n    }\r\n    return { text: res, from, to: pos }\r\n}\r\n\r\nexport function trimInline(text, delim, from, to) {\r\n    let state = {\r\n        text,\r\n        from,\r\n        to,\r\n    }\r\n\r\n    state = trimStart(state.text, delim, state.from, state.to);\r\n    state = trimEnd(state.text, delim, state.from, state.to);\r\n\r\n    if(state.to - state.from < delim.length + 1) {\r\n        state.text = state.text.substring(0, state.from) + state.text.substring(state.to + delim.length);\r\n    }\r\n\r\n    return state.text;\r\n}\r\n","import { MarkdownSerializerState as BaseMarkdownSerializerState } from \"prosemirror-markdown\";\r\nimport { trimInline } from \"../util/markdown\";\r\n\r\n\r\n/**\r\n * Override default MarkdownSerializerState to:\r\n * - handle commonmark delimiters (https://spec.commonmark.org/0.29/#left-flanking-delimiter-run)\r\n */\r\nexport class MarkdownSerializerState extends BaseMarkdownSerializerState {\r\n\r\n    inTable = false;\r\n\r\n    constructor(nodes, marks, options) {\r\n        super(nodes, marks, options ?? {});\r\n        this.inlines = [];\r\n    }\r\n\r\n    render(node, parent, index) {\r\n        super.render(node, parent, index);\r\n        const top = this.inlines[this.inlines.length - 1];\r\n        if(top?.start && top?.end) {\r\n            const { delimiter, start, end } = this.normalizeInline(top);\r\n            this.out = trimInline(this.out, delimiter, start, end);\r\n            this.inlines.pop();\r\n        }\r\n    }\r\n\r\n    markString(mark, open, parent, index) {\r\n        const info = this.marks[mark.type.name]\r\n        if(info.expelEnclosingWhitespace) {\r\n            if(open) {\r\n                this.inlines.push({\r\n                    start: this.out.length,\r\n                    delimiter: info.open,\r\n                });\r\n            } else {\r\n                const top = this.inlines.pop();\r\n                this.inlines.push({\r\n                    ...top,\r\n                    end: this.out.length,\r\n                });\r\n            }\r\n        }\r\n        return super.markString(mark, open, parent, index);\r\n    }\r\n\r\n    normalizeInline(inline) {\r\n        let { start, end } = inline;\r\n        while(this.out.charAt(start).match(/\\s/)) {\r\n            start++;\r\n        }\r\n        return {\r\n            ...inline,\r\n            start,\r\n        }\r\n    }\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Mark } from \"@tiptap/core\";\r\n\r\n\r\nexport default Mark.create({\r\n    name: 'markdownHTMLMark',\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {\r\n                    open(state, mark)  {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            console.warn(`Tiptap Markdown: \"${mark.type.name}\" mark is only available in html mode`);\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[0] ?? '';\r\n                    },\r\n                    close(state, mark) {\r\n                        if(!this.editor.storage.markdown.options.html) {\r\n                            return '';\r\n                        }\r\n                        return getMarkTags(mark)?.[1] ?? '';\r\n                    },\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nfunction getMarkTags(mark) {\r\n    const schema = mark.type.schema;\r\n    const node = schema.text(' ', [mark]);\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n    const match = html.match(/^(<.*?>) (<\\/.*?>)$/);\r\n    return match ? [match[1], match[2]] : null;\r\n}\r\n","\r\n\r\nexport function elementFromString(value) {\r\n    // add a wrapper to preserve leading and trailing whitespace\r\n    const wrappedValue = `<body>${value}</body>`\r\n\r\n    return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body\r\n}\r\n\r\nexport function escapeHTML(value) {\r\n    return value\r\n        ?.replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;');\r\n}\r\n\r\nexport function extractElement(node) {\r\n    const parent = node.parentElement;\r\n    const prepend = parent.cloneNode();\r\n\r\n    while(parent.firstChild && parent.firstChild !== node) {\r\n        prepend.appendChild(parent.firstChild);\r\n    }\r\n\r\n    if(prepend.childNodes.length > 0) {\r\n        parent.parentElement.insertBefore(prepend, parent);\r\n    }\r\n    parent.parentElement.insertBefore(node, parent);\r\n    if(parent.childNodes.length === 0) {\r\n        parent.remove();\r\n    }\r\n}\r\n\r\nexport function unwrapElement(node) {\r\n    const parent = node.parentNode;\r\n\r\n    while (node.firstChild) parent.insertBefore(node.firstChild, node);\r\n\r\n    parent.removeChild(node);\r\n}\r\n","import { Fragment } from \"@tiptap/pm/model\";\r\nimport { getHTMLFromFragment, Node } from \"@tiptap/core\";\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\n\r\nexport default Node.create({\r\n    name: 'markdownHTMLNode',\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(this.editor.storage.markdown.options.html) {\r\n                        state.write(serializeHTML(node, parent));\r\n                    } else {\r\n                        console.warn(`Tiptap Markdown: \"${node.type.name}\" node is only available in html mode`);\r\n                        state.write(`[${node.type.name}]`);\r\n                    }\r\n                    if(node.isBlock) {\r\n                        state.closeBlock(node);\r\n                    }\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n\r\nfunction serializeHTML(node, parent) {\r\n    const schema = node.type.schema;\r\n    const html = getHTMLFromFragment(Fragment.from(node), schema);\r\n\r\n    if(node.isBlock && (parent instanceof Fragment || parent.type.name === schema.topNodeType.name)) {\r\n        return formatBlock(html);\r\n    }\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * format html block as per the commonmark spec\r\n */\r\nfunction formatBlock(html) {\r\n    const dom = elementFromString(html);\r\n    const element = dom.firstElementChild;\r\n\r\n    element.innerHTML = element.innerHTML.trim()\r\n        ? `\\n${element.innerHTML}\\n`\r\n        : `\\n`;\r\n\r\n    return element.outerHTML;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Blockquote = Node.create({\r\n    name: 'blockquote',\r\n});\r\n\r\nexport default Blockquote.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.blockquote,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst BulletList = Node.create({\r\n    name: 'bulletList',\r\n});\r\n\r\nexport default BulletList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    return state.renderList(node, \"  \", () => (this.editor.storage.markdown.options.bulletListMarker || \"-\") + \" \");\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst CodeBlock = Node.create({\r\n    name: 'codeBlock',\r\n});\r\n\r\nexport default CodeBlock.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.write(\"```\" + (node.attrs.language || \"\") + \"\\n\");\r\n                    state.text(node.textContent, false);\r\n                    state.ensureNewLine();\r\n                    state.write(\"```\");\r\n                    state.closeBlock(node);\r\n                },\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.set({\r\n                            langPrefix: this.options.languageClassPrefix ?? 'language-',\r\n                        });\r\n                    },\r\n                    updateDOM(element) {\r\n                        element.innerHTML = element.innerHTML.replace(/\\n<\\/code><\\/pre>/g, '</code></pre>')\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport HTMLNode from './html';\r\n\r\nconst HardBreak = Node.create({\r\n    name: 'hardBreak',\r\n});\r\n\r\nexport default HardBreak.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent, index) {\r\n                    for (let i = index + 1; i < parent.childCount; i++)\r\n                        if (parent.child(i).type != node.type) {\r\n                            state.write(\r\n                                state.inTable\r\n                                    ? HTMLNode.storage.markdown.serialize.call(this, state, node, parent)\r\n                                    : \"\\\\\\n\"\r\n                            );\r\n                            return;\r\n                        }\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Heading = Node.create({\r\n    name: 'heading',\r\n});\r\n\r\nexport default Heading.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.heading,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst HorizontalRule = Node.create({\r\n    name: 'horizontalRule',\r\n});\r\n\r\nexport default HorizontalRule.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.horizontal_rule,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Image = Node.create({\r\n    name: 'image',\r\n});\r\n\r\nexport default Image.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.image,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst ListItem = Node.create({\r\n    name: 'listItem',\r\n});\r\n\r\nexport default ListItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.list_item,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst OrderedList = Node.create({\r\n    name: 'orderedList',\r\n});\r\n\r\nfunction findIndexOfAdjacentNode(node, parent, index) {\r\n    let i = 0;\r\n    for (; index - i > 0; i++) {\r\n        if (parent.child(index - i - 1).type.name !== node.type.name) {\r\n            break;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport default OrderedList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent, index) {\r\n                    const start = node.attrs.start || 1\r\n                    const maxW = String(start + node.childCount - 1).length\r\n                    const space = state.repeat(\" \", maxW + 2)\r\n                    const adjacentIndex = findIndexOfAdjacentNode(node, parent, index);\r\n                    const separator = adjacentIndex % 2 ? ') ' : '. ';\r\n                    state.renderList(node, space, i => {\r\n                        const nStr = String(start + i)\r\n                        return state.repeat(\" \", maxW - nStr.length) + nStr + separator;\r\n                    })\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Paragraph = Node.create({\r\n    name: 'paragraph',\r\n});\r\n\r\nexport default Paragraph.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.nodes.paragraph,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","\r\n\r\nexport function childNodes(node) {\r\n    return node?.content?.content ?? [];\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\nimport { childNodes } from \"../../util/prosemirror\";\r\nimport HTMLNode from './html';\r\n\r\nconst Table = Node.create({\r\n    name: 'table',\r\n});\r\n\r\nexport default Table.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node, parent) {\r\n                    if(!isMarkdownSerializable(node)) {\r\n                        HTMLNode.storage.markdown.serialize.call(this, state, node, parent);\r\n                        return;\r\n                    }\r\n                    state.inTable = true;\r\n                    node.forEach((row, p, i) => {\r\n                        state.write('| ');\r\n                        row.forEach((col, p, j) => {\r\n                            if(j) {\r\n                                state.write(' | ');\r\n                            }\r\n                            const cellContent = col.firstChild;\r\n                            if(cellContent.textContent.trim()) {\r\n                                state.renderInline(cellContent);\r\n                            }\r\n                        });\r\n                        state.write(' |')\r\n                        state.ensureNewLine();\r\n                        if(!i) {\r\n                            const delimiterRow = Array.from({length: row.childCount}).map(() => '---').join(' | ');\r\n                            state.write(`| ${delimiterRow} |`);\r\n                            state.ensureNewLine();\r\n                        }\r\n                    });\r\n                    state.closeBlock(node);\r\n                    state.inTable = false;\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\n\r\nfunction hasSpan(node) {\r\n    return node.attrs.colspan > 1 || node.attrs.rowspan > 1;\r\n}\r\n\r\nfunction isMarkdownSerializable(node) {\r\n    const rows = childNodes(node);\r\n    const firstRow = rows[0];\r\n    const bodyRows = rows.slice(1);\r\n\r\n    if(childNodes(firstRow).some(cell => cell.type.name !== 'tableHeader' || hasSpan(cell) || cell.childCount > 1)) {\r\n        return false;\r\n    }\r\n\r\n    if(bodyRows.some(row =>\r\n        childNodes(row).some(cell => cell.type.name === 'tableHeader' || hasSpan(cell) || cell.childCount > 1)\r\n    )) {\r\n        return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst TaskItem = Node.create({\r\n    name: 'taskItem',\r\n});\r\n\r\nexport default TaskItem.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    const check = node.attrs.checked ? '[x]' : '[ ]';\r\n                    state.write(`${check} `);\r\n                    state.renderContent(node);\r\n                },\r\n                parse: {\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.task-list-item')]\r\n                            .forEach(item => {\r\n                                const input = item.querySelector('input');\r\n                                item.setAttribute('data-type', 'taskItem');\r\n                                if(input) {\r\n                                    item.setAttribute('data-checked', input.checked);\r\n                                    input.remove();\r\n                                }\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import taskListPlugin from \"markdown-it-task-lists\";\r\nimport { Node } from \"@tiptap/core\";\r\nimport BulletList from \"./bullet-list\";\r\n\r\n\r\nconst TaskList = Node.create({\r\n    name: 'taskList',\r\n});\r\n\r\nexport default TaskList.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: BulletList.storage.markdown.serialize,\r\n                parse: {\r\n                    setup(markdownit) {\r\n                        markdownit.use(taskListPlugin);\r\n                    },\r\n                    updateDOM(element) {\r\n                        [...element.querySelectorAll('.contains-task-list')]\r\n                            .forEach(list => {\r\n                                list.setAttribute('data-type', 'taskList');\r\n                            });\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Node } from \"@tiptap/core\";\r\n\r\n\r\nconst Text = Node.create({\r\n    name: 'text',\r\n});\r\n\r\nexport default Text.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownNodeSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize(state, node) {\r\n                    state.text(node.text);\r\n                },\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            }\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Bold = Mark.create({\r\n    name: 'bold',\r\n});\r\n\r\nexport default Bold.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.strong,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            },\r\n        }\r\n    }\r\n});\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Code = Mark.create({\r\n    name: 'code',\r\n});\r\n\r\nexport default Code.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.code,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Italic = Mark.create({\r\n    name: 'italic',\r\n});\r\n\r\nexport default Italic.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.em,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\nimport { defaultMarkdownSerializer } from \"prosemirror-markdown\";\r\n\r\n\r\nconst Link = Mark.create({\r\n    name: 'link',\r\n});\r\n\r\nexport default Link.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: defaultMarkdownSerializer.marks.link,\r\n                parse: {\r\n                    // handled by markdown-it\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import { Mark } from \"@tiptap/core\";\r\n\r\n\r\nconst Strike = Mark.create({\r\n    name: 'strike',\r\n});\r\n\r\nexport default Strike.extend({\r\n    /**\r\n     * @return {{markdown: MarkdownMarkSpec}}\r\n     */\r\n    addStorage() {\r\n        return {\r\n            markdown: {\r\n                serialize: {open: '~~', close: '~~', expelEnclosingWhitespace: true},\r\n                parse: {\r\n                    // handled by markdown-it\r\n                },\r\n            },\r\n        }\r\n    }\r\n});\r\n","import Blockquote from \"./nodes/blockquote\";\r\nimport BulletList from \"./nodes/bullet-list\";\r\nimport CodeBlock from \"./nodes/code-block\";\r\nimport HardBreak from \"./nodes/hard-break\";\r\nimport Heading from \"./nodes/heading\";\r\nimport HorizontalRule from \"./nodes/horizontal-rule\";\r\nimport HTMLNode from \"./nodes/html\";\r\nimport Image from \"./nodes/image\";\r\nimport ListItem from \"./nodes/list-item\";\r\nimport OrderedList from \"./nodes/ordered-list\";\r\nimport Paragraph from \"./nodes/paragraph\";\r\nimport Table from \"./nodes/table\";\r\nimport TaskItem from \"./nodes/task-item\";\r\nimport TaskList from \"./nodes/task-list\";\r\nimport Text from \"./nodes/text\";\r\n\r\nimport Bold from \"./marks/bold\";\r\nimport Code from \"./marks/code\";\r\nimport HTMLMark from \"./marks/html\";\r\nimport Italic from \"./marks/italic\";\r\nimport Link from \"./marks/link\";\r\nimport Strike from \"./marks/strike\";\r\n\r\n\r\nexport default [\r\n    Blockquote,\r\n    BulletList,\r\n    CodeBlock,\r\n    HardBreak,\r\n    Heading,\r\n    HorizontalRule,\r\n    HTMLNode,\r\n    Image,\r\n    ListItem,\r\n    OrderedList,\r\n    Paragraph,\r\n    Table,\r\n    TaskItem,\r\n    TaskList,\r\n    Text,\r\n\r\n    Bold,\r\n    Code,\r\n    HTMLMark,\r\n    Italic,\r\n    Link,\r\n    Strike,\r\n]\r\n","import markdownExtensions from \"../extensions\";\r\n\r\n\r\nexport function getMarkdownSpec(extension) {\r\n    const markdownSpec = extension.storage?.markdown;\r\n    const defaultMarkdownSpec = markdownExtensions.find(e => e.name === extension.name)?.storage.markdown;\r\n\r\n    if(markdownSpec || defaultMarkdownSpec) {\r\n        return {\r\n            ...defaultMarkdownSpec,\r\n            ...markdownSpec,\r\n        };\r\n    }\r\n\r\n    return null;\r\n}\r\n","import { MarkdownSerializerState } from './state';\r\nimport HTMLMark from \"../extensions/marks/html\";\r\nimport HTMLNode from \"../extensions/nodes/html\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\nimport HardBreak from \"../extensions/nodes/hard-break\";\r\n\r\n\r\nexport class MarkdownSerializer {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n\r\n    constructor(editor) {\r\n        this.editor = editor;\r\n    }\r\n\r\n    serialize(content) {\r\n        const state = new MarkdownSerializerState(this.nodes, this.marks, {\r\n            hardBreakNodeName: HardBreak.name,\r\n        });\r\n\r\n        state.renderContent(content);\r\n\r\n        return state.out;\r\n    }\r\n\r\n    get nodes() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.nodes)\r\n                    .map(name => [name, this.serializeNode(HTMLNode)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'node' && this.serializeNode(extension))\r\n                    .map(extension => [extension.name, this.serializeNode(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    get marks() {\r\n        return {\r\n            ...Object.fromEntries(\r\n                Object.keys(this.editor.schema.marks)\r\n                    .map(name => [name, this.serializeMark(HTMLMark)])\r\n            ),\r\n            ...Object.fromEntries(\r\n                this.editor.extensionManager.extensions\r\n                    .filter(extension => extension.type === 'mark' && this.serializeMark(extension))\r\n                    .map(extension => [extension.name, this.serializeMark(extension)])\r\n                ?? []\r\n            ),\r\n        };\r\n    }\r\n\r\n    serializeNode(node) {\r\n        return getMarkdownSpec(node)?.serialize?.bind({ editor: this.editor, options: node.options });\r\n    }\r\n\r\n    serializeMark(mark) {\r\n        const serialize = getMarkdownSpec(mark)?.serialize;\r\n        return serialize\r\n            ? {\r\n                ...serialize,\r\n                open: typeof serialize.open === 'function' ? serialize.open.bind({ editor: this.editor, options: mark.options }) : serialize.open,\r\n                close: typeof serialize.close === 'function' ? serialize.close.bind({ editor: this.editor, options: mark.options }) : serialize.close,\r\n            }\r\n            : null\r\n    }\r\n}\r\n\r\n","import markdownit from \"markdown-it\";\r\nimport { elementFromString, extractElement, unwrapElement } from \"../util/dom\";\r\nimport { getMarkdownSpec } from \"../util/extensions\";\r\n\r\nexport class MarkdownParser {\r\n    /**\r\n     * @type {import('@tiptap/core').Editor}\r\n     */\r\n    editor = null;\r\n    /**\r\n     * @type {markdownit}\r\n     */\r\n    md = null;\r\n\r\n    constructor(editor, { html, linkify, breaks }) {\r\n        this.editor = editor;\r\n        this.md = this.withPatchedRenderer(markdownit({\r\n            html,\r\n            linkify,\r\n            breaks,\r\n        }));\r\n    }\r\n\r\n    parse(content, { inline } = {}) {\r\n        if(typeof content === 'string') {\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.setup?.call({ editor:this.editor, options:extension.options }, this.md)\r\n            );\r\n\r\n            const renderedHTML = this.md.render(content);\r\n            const element = elementFromString(renderedHTML);\r\n\r\n            this.editor.extensionManager.extensions.forEach(extension =>\r\n                getMarkdownSpec(extension)?.parse?.updateDOM?.call({ editor:this.editor, options:extension.options }, element)\r\n            );\r\n\r\n            this.normalizeDOM(element, { inline, content });\r\n\r\n            return element.innerHTML;\r\n        }\r\n\r\n        return content;\r\n    }\r\n\r\n    normalizeDOM(node, { inline, content }) {\r\n        this.normalizeBlocks(node);\r\n\r\n        // remove all \\n appended by markdown-it\r\n        node.querySelectorAll('*').forEach(el => {\r\n            if(el.nextSibling?.nodeType === Node.TEXT_NODE && !el.closest('pre')) {\r\n                el.nextSibling.textContent = el.nextSibling.textContent.replace(/^\\n/, '');\r\n            }\r\n        });\r\n\r\n        if(inline) {\r\n            this.normalizeInline(node, content);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    normalizeBlocks(node) {\r\n        const blocks = Object.values(this.editor.schema.nodes)\r\n            .filter(node => node.isBlock);\r\n\r\n        const selector = blocks\r\n            .map(block => block.spec.parseDOM?.map(spec => spec.tag))\r\n            .flat()\r\n            .filter(Boolean)\r\n            .join(',');\r\n\r\n        if(!selector) {\r\n            return;\r\n        }\r\n\r\n        [...node.querySelectorAll(selector)].forEach(el => {\r\n            if(el.parentElement.matches('p')) {\r\n                extractElement(el);\r\n            }\r\n        });\r\n    }\r\n\r\n    normalizeInline(node, content) {\r\n        if(node.firstElementChild?.matches('p')) {\r\n            const firstParagraph = node.firstElementChild;\r\n            const { nextElementSibling } = firstParagraph;\r\n            const startSpaces = content.match(/^\\s+/)?.[0] ?? '';\r\n            const endSpaces = !nextElementSibling\r\n                ? content.match(/\\s+$/)?.[0] ?? ''\r\n                : '';\r\n\r\n            if(content.match(/^\\n\\n/)) {\r\n                firstParagraph.innerHTML = `${firstParagraph.innerHTML}${endSpaces}`;\r\n                return;\r\n            }\r\n\r\n            unwrapElement(firstParagraph);\r\n\r\n            node.innerHTML = `${startSpaces}${node.innerHTML}${endSpaces}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {markdownit} md\r\n     */\r\n    withPatchedRenderer(md) {\r\n        const withoutNewLine = (renderer) => (...args) => {\r\n            const rendered = renderer(...args);\r\n            if(rendered === '\\n') {\r\n                return rendered; // keep soft breaks\r\n            }\r\n            if(rendered[rendered.length - 1] === '\\n') {\r\n                return rendered.slice(0, -1);\r\n            }\r\n            return rendered;\r\n        }\r\n\r\n        md.renderer.rules.hardbreak = withoutNewLine(md.renderer.rules.hardbreak);\r\n        md.renderer.rules.softbreak = withoutNewLine(md.renderer.rules.softbreak);\r\n        md.renderer.rules.fence = withoutNewLine(md.renderer.rules.fence);\r\n        md.renderer.rules.code_block = withoutNewLine(md.renderer.rules.code_block);\r\n        md.renderer.renderToken = withoutNewLine(md.renderer.renderToken.bind(md.renderer));\r\n\r\n        return md;\r\n    }\r\n}\r\n\r\n","import { Extension } from \"@tiptap/core\";\r\nimport { Plugin, PluginKey } from '@tiptap/pm/state';\r\nimport { DOMParser } from '@tiptap/pm/model';\r\nimport { elementFromString } from \"../../util/dom\";\r\n\r\nexport const MarkdownClipboard = Extension.create({\r\n    name: 'markdownClipboard',\r\n    addOptions() {\r\n        return {\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addProseMirrorPlugins() {\r\n        return [\r\n            new Plugin({\r\n                key: new PluginKey('markdownClipboard'),\r\n                props: {\r\n                    clipboardTextParser: (text, context, plainText) => {\r\n                        if(plainText || !this.options.transformPastedText) {\r\n                            return null; // pasting with shift key prevents formatting\r\n                        }\r\n                        const parsed = this.editor.storage.markdown.parser.parse(text, { inline: true });\r\n                        return DOMParser.fromSchema(this.editor.schema)\r\n                            .parseSlice(elementFromString(parsed), {\r\n                                preserveWhitespace: true,\r\n                                context,\r\n                            });\r\n                    },\r\n                    /**\r\n                     * @param {import('prosemirror-model').Slice} slice\r\n                     */\r\n                    clipboardTextSerializer: (slice) => {\r\n                        if(!this.options.transformCopiedText) {\r\n                            return null;\r\n                        }\r\n                        return this.editor.storage.markdown.serializer.serialize(slice.content);\r\n                    },\r\n                },\r\n            })\r\n        ]\r\n    }\r\n})\r\n","import { Extension, extensions } from '@tiptap/core';\r\nimport { MarkdownTightLists } from \"./extensions/tiptap/tight-lists\";\r\nimport { MarkdownSerializer } from \"./serialize/MarkdownSerializer\";\r\nimport { MarkdownParser } from \"./parse/MarkdownParser\";\r\nimport { MarkdownClipboard } from \"./extensions/tiptap/clipboard\";\r\n\r\nexport const Markdown = Extension.create({\r\n    name: 'markdown',\r\n    priority: 50,\r\n    addOptions() {\r\n        return {\r\n            html: true,\r\n            tightLists: true,\r\n            tightListClass: 'tight',\r\n            bulletListMarker: '-',\r\n            linkify: false,\r\n            breaks: false,\r\n            transformPastedText: false,\r\n            transformCopiedText: false,\r\n        }\r\n    },\r\n    addCommands() {\r\n        const commands = extensions.Commands.config.addCommands();\r\n        return {\r\n            setContent: (content, emitUpdate, parseOptions) => (props) => {\r\n                return commands.setContent(\r\n                    props.editor.storage.markdown.parser.parse(content),\r\n                    emitUpdate,\r\n                    parseOptions\r\n                )(props);\r\n            },\r\n            insertContentAt: (range, content, options) => (props) => {\r\n                return commands.insertContentAt(\r\n                    range,\r\n                    props.editor.storage.markdown.parser.parse(content, { inline: true }),\r\n                    options\r\n                )(props);\r\n            },\r\n        }\r\n    },\r\n    onBeforeCreate() {\r\n        this.editor.storage.markdown = {\r\n            options: { ...this.options },\r\n            parser: new MarkdownParser(this.editor, this.options),\r\n            serializer: new MarkdownSerializer(this.editor),\r\n            getMarkdown: () => {\r\n                return this.editor.storage.markdown.serializer.serialize(this.editor.state.doc);\r\n            },\r\n        }\r\n        this.editor.options.initialContent = this.editor.options.content;\r\n        this.editor.options.content = this.editor.storage.markdown.parser.parse(this.editor.options.content);\r\n    },\r\n    onCreate() {\r\n        this.editor.options.content = this.editor.options.initialContent;\r\n        delete this.editor.options.initialContent;\r\n    },\r\n    addStorage() {\r\n        return {\r\n            /// storage will be defined in onBeforeCreate() to prevent initial object overriding\r\n        }\r\n    },\r\n    addExtensions() {\r\n        return [\r\n            MarkdownTightLists.configure({\r\n                tight: this.options.tightLists,\r\n                tightClass: this.options.tightListClass,\r\n            }),\r\n            MarkdownClipboard.configure({\r\n                transformPastedText: this.options.transformPastedText,\r\n                transformCopiedText: this.options.transformCopiedText,\r\n            }),\r\n        ]\r\n    },\r\n});\r\n"],"names":["MarkdownTightLists","Extension","create","name","addOptions","tight","tightClass","listTypes","addGlobalAttributes","types","options","attributes","default","parseHTML","element","getAttribute","querySelector","renderHTML","class","addCommands","_this","toggleTight","arguments","length","undefined","_ref","editor","commands","isActive","attrs","getAttributes","updateAttributes","some","md","markdownit","scanDelims","text","pos","inline","State","prototype","call","src","posMax","state","shiftDelim","delim","start","offset","res","substring","trimStart","from","to","can_open","trimEnd","can_close","trimInline","MarkdownSerializerState","BaseMarkdownSerializerState","constructor","nodes","marks","inTable","inlines","render","node","parent","index","top","end","delimiter","normalizeInline","out","pop","markString","mark","open","info","type","expelEnclosingWhitespace","push","charAt","match","Mark","addStorage","markdown","serialize","_getMarkTags$","_getMarkTags","storage","html","console","warn","getMarkTags","close","_getMarkTags$2","_getMarkTags2","parse","schema","getHTMLFromFragment","Fragment","elementFromString","value","wrappedValue","window","DOMParser","parseFromString","body","extractElement","parentElement","prepend","cloneNode","firstChild","appendChild","childNodes","insertBefore","remove","unwrapElement","parentNode","removeChild","Node","write","serializeHTML","isBlock","closeBlock","topNodeType","formatBlock","dom","firstElementChild","innerHTML","trim","outerHTML","Blockquote","extend","defaultMarkdownSerializer","blockquote","BulletList","renderList","bulletListMarker","CodeBlock","language","textContent","ensureNewLine","setup","_this$options$languag","set","langPrefix","languageClassPrefix","updateDOM","replace","HardBreak","i","childCount","child","HTMLNode","Heading","heading","HorizontalRule","horizontal_rule","Image","image","ListItem","list_item","OrderedList","findIndexOfAdjacentNode","maxW","String","space","repeat","adjacentIndex","separator","nStr","Paragraph","paragraph","_node$content$content","_node$content","content","Table","isMarkdownSerializable","forEach","row","p","col","j","cellContent","renderInline","delimiterRow","Array","map","join","hasSpan","colspan","rowspan","rows","firstRow","bodyRows","slice","cell","TaskItem","check","checked","renderContent","querySelectorAll","item","input","setAttribute","TaskList","use","taskListPlugin","list","Text","Bold","strong","Code","code","Italic","em","Link","link","Strike","HTMLMark","getMarkdownSpec","extension","_extension$storage","_markdownExtensions$f","markdownSpec","defaultMarkdownSpec","markdownExtensions","find","e","MarkdownSerializer","hardBreakNodeName","_this$editor$extensio","Object","fromEntries","keys","serializeNode","extensionManager","extensions","filter","_this$editor$extensio2","serializeMark","_getMarkdownSpec","bind","_getMarkdownSpec2","MarkdownParser","linkify","breaks","withPatchedRenderer","renderedHTML","normalizeDOM","_ref2","normalizeBlocks","el","_el$nextSibling","nextSibling","nodeType","TEXT_NODE","closest","blocks","values","selector","block","_block$spec$parseDOM","spec","parseDOM","tag","flat","Boolean","matches","_node$firstElementChi","_content$match$","_content$match","_content$match$2","_content$match2","firstParagraph","nextElementSibling","startSpaces","endSpaces","withoutNewLine","renderer","rendered","rules","hardbreak","softbreak","fence","code_block","renderToken","MarkdownClipboard","transformPastedText","transformCopiedText","addProseMirrorPlugins","Plugin","key","PluginKey","props","clipboardTextParser","context","plainText","parsed","parser","fromSchema","parseSlice","preserveWhitespace","clipboardTextSerializer","serializer","Markdown","priority","tightLists","tightListClass","Commands","config","setContent","emitUpdate","parseOptions","insertContentAt","range","onBeforeCreate","getMarkdown","doc","initialContent","onCreate","addExtensions","configure"],"mappings":"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"}